// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  output          = "../node_modules/.prisma/client"
}

model Category {
  id          Int            @id @default(autoincrement())
  name        String         @db.VarChar(255)
  status      CategoryStatus @default(ONGOING)
  ingredients Ingredient[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isActive    Boolean        @default(true)
}

model Ingredient {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  quantity   Int
  status     Status    @default(AVAILABLE)
  Category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isActive   Boolean   @default(true)
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  price       Int
  status      Status       @default(AVAILABLE)
  orders      Order[]
  ingredients Ingredient[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isActive    Boolean      @default(true)
}

model Order {
  id            Int      @id @default(autoincrement())
  customerName  String   @db.VarChar(255)
  product       Product  @relation(fields: [productId], references: [id])
  productId     Int
  numberOfItems Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isActive      Boolean  @default(true)
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  username  String   @db.VarChar(255)
  password  String
  role      UserRole @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}

enum CategoryStatus {
  ONGOING
  STOPPED
}

enum Status {
  AVAILABLE
  NOTAVAILABLE
}

enum UserRole {
  ADMIN
  STAFF
}
